#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&soft_off { hold-time-ms = <2000>; };

/ {
    behaviors {
        td_copy_paste: td_copy_paste {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_COPY_PASTE";
            #binding-cells = <0>;
            bindings = <&kp RG(C)>, <&kp RG(V)>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    hmr: hmr {
        compatible = "zmk,behavior-hold-tap";
        label = "HMR";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <280>;
        quick-tap-ms = <175>;
        require-prior-idle-ms = <150>;
        hold-trigger-on-release;
        hold-trigger-key-positions = <46 45 44 42 31 18 5 4 3 2 1 0 13 14 15 29 16 17 30 28 47 43 33 32>;
    };

    hml: hml {
        compatible = "zmk,behavior-hold-tap";
        label = "HML";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <280>;
        quick-tap-ms = <175>;
        require-prior-idle-ms = <150>;
        hold-trigger-on-release;
        hold-trigger-key-positions = <46 45 44 42 41 40 7 8 9 22 36 23 10 11 24 37 38 25 12 43 47 39 26 27>;
    };

    combos {
        compatible = "zmk,combos";

        softoff {
            bindings = <&soft_off>;
            key-positions = <1 15 29>;
        };

        ty_caps {
            bindings = <&caps_word>;
            key-positions = <5 7>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp LG(GRAVE)  &kp Q        &kp W        &kp E               &kp R                &kp T                             &kp UP                &kp Y               &kp U                &kp I         &kp O        &kp P           &kp BSPC
&kp LC(SPACE)  &hml LGUI A  &hml LALT S  &hml LCTRL D        &hml LA(LC(LGUI)) F  &kp G                   &kp LEFT  &kp ENTER  &kp RIGHT  &kp H               &hmr LA(LC(LGUI)) J  &hmr RCTRL K  &hmr RALT L  &hmr RGUI SEMI  &kp LS(RETURN)
&kp LSHIFT     &kp Z        &kp X        &kp C               &kp V                &kp B      &kp SPACE              &kp DOWN              &kp N               &kp M                &kp COMMA     &kp DOT      &kp FSLH        &td_copy_paste
                                         &lt 4 LEFT_COMMAND  &lt 1 SPACE          &lt 3 TAB                                               &mt LEFT_SHIFT ESC  &lt 2 RET            &kp RALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
            label = "QWERTY";
        };

        symbols_layer {
            bindings = <
&kp GRAVE  &kp TILDE  &kp LT     &kp GT     &kp BSLH   &kp PIPE                                &mmv MOVE_UP                     &kp AMPS         &kp CARET    &kp LBRC  &kp RBRC  &kp DLLR   &trans
&none      &kp EXCL   &kp MINUS  &kp PLUS   &kp EQUAL  &kp SQT                 &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp DQT          &kp UNDER    &kp LPAR  &kp RPAR  &kp COLON  &none
&none      &kp PRCNT  &kp SLASH  &kp ASTRK  &kp HASH   &kp DEL   &kp C_MUTE                    &mmv MOVE_DOWN                   &rgb_ug RGB_EFR  &kp LS(RET)  &kp LBKT  &kp RBKT  &kp QMARK  &none
                                 &none      &none      &none                                                                    &kp BACKSPACE    &kp SPACE    &none
            >;

            sensor-bindings = <&scroll_encoder>;
            label = "SYM";
        };

        numbers_layer {
            bindings = <
&trans     &kp MINUS  &kp N1  &kp N2  &kp N3     &kp PLUS                        &trans          &kp GREATER_THAN  &kp F1          &kp F2  &kp F3  &kp F10  &trans
&kp DOT    &kp N0     &kp N4  &kp N5  &kp N6     &kp LA(BSPC)            &trans  &trans  &trans  &kp EQUAL         &hmr RSHIFT F4  &kp F5  &kp F6  &kp F11  &kp COLON
&kp COMMA  &kp FSLH   &kp N7  &kp N8  &kp N9     &kp ASTERISK  &trans            &trans          &kp LESS_THAN     &kp F7          &kp F8  &kp F9  &kp F12  &trans
                              &trans  &kp SPACE  &kp BSPC                                        &trans            &trans          &trans
            >;

            label = "NUM";
        };

        navigation_layer {
            bindings = <
&trans  &trans     &kp C_VOLUME_DOWN  &kp C_MUTE  &kp C_VOLUME_UP  &trans                    &trans          &trans    &trans    &trans  &trans     &trans  &trans
&trans  &kp PG_DN  &kp PG_UP          &kp HOME    &kp END          &trans            &trans  &trans  &trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans     &trans             &trans      &trans           &trans  &trans            &trans          &trans    &trans    &trans  &trans     &trans  &trans
                                      &trans      &trans           &trans                                    &trans    &trans    &trans
            >;

            label = "NAV";
        };

        system_layer {
            bindings = <
&trans      &out OUT_BLE  &out OUT_USB  &trans        &trans        &trans                          &trans          &rgb_ug RGB_SPD  &rgb_ug RGB_SPI       &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4            &trans  &trans  &trans  &trans           &kp C_PREV            &kp C_PP         &kp C_NEXT       &kp C_STOP       &trans
&trans      &trans        &trans        &trans        &trans        &trans        &trans            &trans          &trans           &kp LG(LS(NUMBER_4))  &trans           &trans           &trans           &trans
                                        &trans        &trans        &trans                                          &trans           &trans                &trans
            >;

            label = "SYS";
        };
    };
};
