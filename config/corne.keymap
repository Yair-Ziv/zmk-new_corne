#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10
#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT


/ {
    behaviors {
        snake_caps: snake_caps {
            compatible = "zmk,behavior-caps-word";
            label = "SNAKE_CAPS";
            #binding-cells = <0>;
            continue-list = <UNDER DOT MINUS DEL BACKSPACE>;
        };

        td_copy_paste: td_copy_paste {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_COPY_PASTE";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp LG(C)>, <&kp LG(V)>;
        };

        htrl: htrl {
            compatible = "zmk,behavior-hold-tap";
            label = "HTRL";
            bindings = <&none>, <&none>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        td_d_backspace: td_d_backspace {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_D_BACKSPACE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <46 45 44 42 41 40 31 18 5 4 3 2 1 0 13 26 27 14 15 29 16 17 30 28>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <46 45 44 42 41 40 7 20 33 34 21 8 9 22 35 36 23 10 11 24 37 38 25 12>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        label = "RGB_ENCODER";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    combos {
        compatible = "zmk,combos";

        ty_snake {
            bindings = <&caps_word>;
            key-positions = <5 7>;
        };

        gaming_toggle {
            bindings = <&tog 5>;
            key-positions = <0 12>;
        };
    };

    macros {
        s_up: s_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&msc SCRL_UP>;
            label = "S_UP";
        };

        s_dn: s_dn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>;
            label = "S_DN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // --------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |                ↑    |  Y  |  U   |  I  |  O  |  P  | BKSP |      &kp UP_ARROW 
            // | SHIFT |  A  |  S  |  D  |  F  |  G  |               ↓    |  H  |  J   |  K  |  L  |  ;  |  '   | 
            // | CTRL |  Z  |  X  |  C  |  V  |  B  |                ←    |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |                →    | ENT | RSE  | ALT |
            //                                                      enter

            bindings = <
&kp LG(GRAVE)  &kp Q            &kp W        &kp E               &kp R                    &kp T        &kp UP_ARROW     &kp Y               &kp U                    &kp I         &kp O        &kp P                &none
&kp LC(SPACE)  &hml LEFT_GUI A  &hml LALT S  &hml LCTRL D        &hml LA(LC(LEFT_GUI)) F  &kp G        &kp DOWN_ARROW   &kp H               &hmr LA(LC(LEFT_GUI)) J  &hmr RCTRL K  &hmr RALT L  &hmr RIGHT_GUI SEMI  &kp LS(RET)
&kp LSHIFT     &kp Z            &kp X        &kp C               &kp V                    &kp B        &kp LEFT_ARROW   &kp N               &kp M                    &kp COMMA     &kp DOT      &kp FSLH             &none
                                &kp K_MUTE   &lt 4 LEFT_COMMAND  &lt 1 SPACE              &lt 3 TAB    &kp RIGHT_ARROW  &mt LEFT_SHIFT ESC  &lt 6 RET                &kp RALT
                                                                                                       &kp ENTER
            >;

            label = "QWERTY";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        symbols_layer {
            bindings = <
&kp GRAVE  &kp TILDE    &kp LT     &kp GT     &kp BSLH   &kp PIPE    &none  &kp AMPS       &kp CARET       &kp LBRC  &kp RBRC  &kp DOLLAR    &none
&none      &kp EXCL     &kp MINUS  &kp PLUS   &kp EQUAL  &kp SQT     &none  &kp DQT        &kp UNDERSCORE  &kp LPAR  &kp RPAR  &kp COLON     &none
&none      &kp PERCENT  &kp SLASH  &kp ASTRK  &kp HASH   &kp DEL     &none  &none          &kp LS(RET)     &kp LBKT  &kp RBKT  &kp QUESTION  &none
                        &none      &none      &none      &none       &none  &kp BACKSPACE  &kp SPACE       &none
                                                                     &none
            >;

            label = "SYM";
        };

        numbers_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none      &kp EXCL  &kp AT  &kp HASH  &kp DLLR   &kp PRCNT        &mmv MOVE_UP     &kp CARET  &kp AMPS  &kp BACKSPACE  &kp LA(BACKSPACE)  &kp PERIOD  &none
&kp COLON  &kp N1    &kp N2  &kp N3    &kp N4     &kp N5           &mmv MOVE_DOWN   &kp N6     &kp N7    &kp N8         &kp N9             &kp N0      &kp MINUS
&kp F11    &kp F1    &kp F2  &kp F3    &kp F4     &kp F5           &mmv MOVE_LEFT   &kp F6     &kp F7    &kp F8         &kp F9             &kp F10     &kp F12
                     &none   &none     &kp SPACE  &kp BACKSPACE    &mmv MOVE_RIGHT  &none      &none     &none
                                                                   &mkp LCLK
            >;

            label = "NUM";
            sensor-bindings = <&scroll_encoder>;
        };

        navigation_layer {
            bindings = <
&none  &none     &kp UP    &kp PG_UP  &none           &none      &s_up  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none  &none
&none  &kp LEFT  &kp DOWN  &kp RIGHT  &kp HOME        &kp END    &s_dn  &kp LEFT        &kp DOWN        &kp UP        &kp RIGHT        &none  &none
&none  &none     &none     &kp PG_DN  &kp LEFT_SHIFT  &none      &none  &none           &none           &none         &none            &none  &none
                 &none     &none      &none           &none      &none  &mkp LCLK       &mkp RCLK       &none
                                                                 &none
            >;

            label = "NAV";
        };

        system_layer {
            bindings = <
&none       &out OUT_BLE  &out OUT_USB     &none         &none         &none           &rgb_ug RGB_SPI  &none            &none           &none     &none       &none       &none
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &rgb_ug RGB_SPD  &none            &kp C_PREV      &kp C_PP  &kp C_NEXT  &kp C_STOP  &none
&none       &none         &none            &none         &none         &none           &rgb_ug RGB_BRD  &kp PRINTSCREEN  &kp LG(LS(N4))  &none     &none       &none       &none
                          &rgb_ug RGB_EFF  &none         &none         &none           &rgb_ug RGB_BRI  &none            &none           &none
                                                                                       &rgb_ug RGB_TOG
            >;

            label = "SYS";
        };

        gaming_layer {
            label = "GAME";
            bindings = <
&none       &kp Q  &kp W       &kp E               &kp R        &kp T        &kp UP_ARROW     &kp Y               &kp U      &kp I      &kp O    &kp P     &none
&none       &kp A  &kp S       &kp D               &kp F        &kp G        &kp DOWN_ARROW   &kp H               &kp J      &kp K      &kp L    &kp SEMI  &kp LS(RET)
&kp LSHIFT  &kp Z  &kp X       &kp C               &kp V        &kp B        &kp LEFT_ARROW   &kp N               &kp M      &kp COMMA  &kp DOT  &kp FSLH  &none
                   &kp K_MUTE  &lt 4 LEFT_COMMAND  &lt 1 SPACE  &lt 3 TAB    &kp RIGHT_ARROW  &mt LEFT_SHIFT ESC  &lt 2 RET  &kp RALT
                                                                             &kp ENTER
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        layer_6 {
            bindings = <
&trans     &kp MINUS  &kp N1  &kp N2  &kp N3  &kp PLUS             &none   &kp GREATER_THAN  &kp F1          &kp F2  &kp F3  &kp F10  &trans
&kp DOT    &kp N0     &kp N4  &kp N5  &kp N6  &kp LA(BACKSPACE)    &trans  &kp EQUAL         &hmr LSHIFT F4  &kp F5  &kp F6  &kp F11  &trans
&kp COMMA  &kp FSLH   &kp N7  &kp N8  &kp N9  &kp ASTERISK         &none   &kp LT            &kp F7          &kp F8  &kp F9  &kp F12  &trans
                      &trans  &trans  &trans  &trans               &trans  &trans            &trans          &trans
                                                                   &trans
            >;
        };
    };
};
